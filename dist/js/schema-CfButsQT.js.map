{"version":3,"file":"schema-CfButsQT.js","sources":["../../src/utils/schema.ts"],"sourcesContent":["/**\r\n * JSON-LD schema builders for SEO. These utilities return stringified\r\n * JSON-LD blocks to inject via the SEO component's scripts prop.\r\n */\r\n\r\nexport const ORG = {\r\n  name: 'Bradford Informed Guidance',\r\n  legalName: 'Bradford Informed Guidance LLC',\r\n  url: 'https://bradfordinformedguidance.com',\r\n  logo: 'https://bradfordinformedguidance.com/images/bradford-logo-512.png',\r\n  image: 'https://bradfordinformedguidance.com/images/bradford-office.jpg',\r\n  telephone: '+1-689-325-6570',\r\n  email: 'zbradford@bradfordinformedguidance.com',\r\n  foundingDate: '2023',\r\n  numberOfEmployees: '5-10',\r\n  description: 'Expert health and life insurance guidance for individuals, families, and businesses across Florida, Michigan, and North Carolina.',\r\n  slogan: 'Insurance Made Simple, Coverage Made Smart',\r\n  vatID: 'US123456789', // Update with actual tax ID\r\n  duns: '123456789', // Update with actual DUNS number\r\n  naics: '524210', // Insurance Agencies and Brokerages\r\n  address: {\r\n    streetAddress: '4200 W Cypress St',\r\n    addressLocality: 'Tampa',\r\n    addressRegion: 'FL',\r\n    postalCode: '33607',\r\n    addressCountry: 'US'\r\n  },\r\n  openingHours: 'Mo-Su 08:00-20:00',\r\n  areaServed: ['Florida', 'Michigan', 'North Carolina'],\r\n  sameAs: [\r\n    'https://www.facebook.com/BradfordInformedGuidance',\r\n    'https://www.linkedin.com/company/bradford-informed-guidance',\r\n    'https://twitter.com/BradfordInsure',\r\n    'https://www.instagram.com/bradford_insurance',\r\n    'https://www.youtube.com/c/BradfordInformedGuidance'\r\n  ],\r\n  serviceType: [\r\n    'Health Insurance',\r\n    'Life Insurance',\r\n    'Indexed Universal Life (IUL)',\r\n    'PPO Networks',\r\n    'Individual Health Plans',\r\n    'Family Health Plans',\r\n    'Short-Term Medical',\r\n    'Dental Insurance',\r\n    'Vision Insurance'\r\n  ]\r\n};\r\n\r\ntype Address = {\r\n  streetAddress?: string;\r\n  addressLocality?: string;\r\n  addressRegion?: string;\r\n  postalCode?: string;\r\n  addressCountry?: string;\r\n};\r\n\r\nexport function organizationSchema() {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'Organization',\r\n    '@id': `${ORG.url}#organization`,\r\n    name: ORG.name,\r\n    legalName: ORG.legalName,\r\n    url: ORG.url,\r\n    logo: {\r\n      '@type': 'ImageObject',\r\n      url: ORG.logo,\r\n      width: 512,\r\n      height: 512\r\n    },\r\n    image: ORG.image,\r\n    telephone: ORG.telephone,\r\n    email: ORG.email,\r\n    foundingDate: ORG.foundingDate,\r\n    numberOfEmployees: ORG.numberOfEmployees,\r\n    description: ORG.description,\r\n    slogan: ORG.slogan,\r\n    vatID: ORG.vatID,\r\n    duns: ORG.duns,\r\n    naics: ORG.naics,\r\n    sameAs: ORG.sameAs,\r\n    areaServed: ORG.areaServed,\r\n    serviceType: ORG.serviceType,\r\n    knowsAbout: [\r\n      'Health Insurance',\r\n      'Life Insurance',\r\n      'PPO Networks',\r\n      'Insurance Brokerage',\r\n      'Risk Management',\r\n      'Employee Benefits'\r\n    ],\r\n    hasOfferCatalog: {\r\n      '@type': 'OfferCatalog',\r\n      name: 'Insurance Services',\r\n      itemListElement: [\r\n        {\r\n          '@type': 'Offer',\r\n          itemOffered: {\r\n            '@type': 'Service',\r\n            name: 'Health Insurance Plans',\r\n            description: 'Comprehensive health insurance coverage for individuals and families'\r\n          }\r\n        },\r\n        {\r\n          '@type': 'Offer',\r\n          itemOffered: {\r\n            '@type': 'Service',\r\n            name: 'Life Insurance Policies',\r\n            description: 'Term and permanent life insurance solutions'\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function serviceSchema(services: string[] = ['Health Insurance', 'Life Insurance']) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'Service',\r\n    provider: {\r\n      '@type': 'Organization',\r\n      name: ORG.name,\r\n      url: ORG.url,\r\n    },\r\n    serviceType: services,\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function websiteSchema() {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'WebSite',\r\n    name: ORG.name,\r\n    url: ORG.url,\r\n    potentialAction: {\r\n      '@type': 'SearchAction',\r\n      target: `${ORG.url}/search?q={search_term_string}`,\r\n      'query-input': 'required name=search_term_string',\r\n    },\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function breadcrumbSchema(crumbs: Array<{ name: string; item: string }>) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'BreadcrumbList',\r\n    itemListElement: crumbs.map((c, i) => ({\r\n      '@type': 'ListItem',\r\n      position: i + 1,\r\n      name: c.name,\r\n      item: c.item,\r\n    })),\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\n// Advanced schema builders for insurance industry domination\r\nexport function faqSchema(faqs: Array<{ question: string; answer: string }>) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'FAQPage',\r\n    mainEntity: faqs.map(faq => ({\r\n      '@type': 'Question',\r\n      name: faq.question,\r\n      acceptedAnswer: {\r\n        '@type': 'Answer',\r\n        text: faq.answer\r\n      }\r\n    }))\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function reviewSchema(rating: number, reviewCount: number, bestRating = 5) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'Organization',\r\n    '@id': `${ORG.url}#organization`,\r\n    aggregateRating: {\r\n      '@type': 'AggregateRating',\r\n      ratingValue: rating,\r\n      reviewCount: reviewCount,\r\n      bestRating: bestRating,\r\n      worstRating: 1\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function professionalServiceSchema(serviceName: string, description: string, areaServed?: string) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'ProfessionalService',\r\n    '@id': `${ORG.url}#${serviceName.toLowerCase().replace(/\\s+/g, '-')}`,\r\n    name: serviceName,\r\n    description: description,\r\n    provider: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name\r\n    },\r\n    areaServed: areaServed ? {\r\n      '@type': 'State',\r\n      name: areaServed\r\n    } : ORG.areaServed,\r\n    serviceType: serviceName,\r\n    category: 'Insurance Services',\r\n    hasOfferCatalog: {\r\n      '@type': 'OfferCatalog',\r\n      name: `${serviceName} Options`,\r\n      itemListElement: [\r\n        {\r\n          '@type': 'Offer',\r\n          itemOffered: {\r\n            '@type': 'Service',\r\n            name: serviceName,\r\n            description: description\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function howToSchema(title: string, steps: Array<{ name: string; text: string; image?: string }>) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'HowTo',\r\n    name: title,\r\n    description: `Step-by-step guide: ${title}`,\r\n    image: steps[0]?.image || `${ORG.url}/images/how-to-default.jpg`,\r\n    totalTime: 'PT15M', // 15 minutes average\r\n    estimatedCost: {\r\n      '@type': 'MonetaryAmount',\r\n      currency: 'USD',\r\n      value: '0'\r\n    },\r\n    supply: {\r\n      '@type': 'HowToSupply',\r\n      name: 'Valid identification and personal information'\r\n    },\r\n    tool: {\r\n      '@type': 'HowToTool',\r\n      name: 'Computer or mobile device with internet access'\r\n    },\r\n    step: steps.map((step, index) => ({\r\n      '@type': 'HowToStep',\r\n      position: index + 1,\r\n      name: step.name,\r\n      text: step.text,\r\n      image: step.image,\r\n      url: `${ORG.url}#step-${index + 1}`\r\n    }))\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function articleSchema(title: string, description: string, author: string, publishDate: string, modifiedDate?: string, image?: string) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'Article',\r\n    headline: title,\r\n    description: description,\r\n    image: image || `${ORG.url}/images/article-default.jpg`,\r\n    author: {\r\n      '@type': 'Person',\r\n      name: author,\r\n      worksFor: {\r\n        '@type': 'Organization',\r\n        '@id': `${ORG.url}#organization`,\r\n        name: ORG.name\r\n      }\r\n    },\r\n    publisher: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name,\r\n      logo: {\r\n        '@type': 'ImageObject',\r\n        url: ORG.logo\r\n      }\r\n    },\r\n    datePublished: publishDate,\r\n    dateModified: modifiedDate || publishDate,\r\n    mainEntityOfPage: {\r\n      '@type': 'WebPage',\r\n      '@id': ORG.url\r\n    },\r\n    about: {\r\n      '@type': 'Thing',\r\n      name: 'Insurance'\r\n    },\r\n    keywords: 'insurance, health insurance, life insurance, financial planning'\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function insuranceQuoteSchema(insuranceType: string, coverage: string, premium?: number) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'Service',\r\n    '@id': `${ORG.url}#quote-${insuranceType.toLowerCase().replace(/\\s+/g, '-')}`,\r\n    name: `${insuranceType} Quote`,\r\n    description: `Get instant quotes for ${insuranceType} coverage`,\r\n    provider: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name\r\n    },\r\n    serviceType: insuranceType,\r\n    category: 'Insurance Quote',\r\n    areaServed: ORG.areaServed,\r\n    hasOfferCatalog: {\r\n      '@type': 'OfferCatalog',\r\n      name: `${insuranceType} Plans`,\r\n      itemListElement: [\r\n        {\r\n          '@type': 'Offer',\r\n          name: coverage,\r\n          description: `Comprehensive ${insuranceType} coverage`,\r\n          price: premium ? premium.toString() : 'Contact for pricing',\r\n          priceCurrency: 'USD',\r\n          availability: 'https://schema.org/InStock',\r\n          itemCondition: 'https://schema.org/NewCondition'\r\n        }\r\n      ]\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\n// Enhanced schema builders for insurance industry rich snippets\r\n// Function overload to support multiple calling patterns\r\nexport function localBusinessSchema(stateCode: 'FL' | 'MI' | 'NC', address: { streetAddress: string; addressLocality: string; addressRegion: string; postalCode: string; addressCountry?: string }, phone: string): string;\r\nexport function localBusinessSchema(location: { address: string; city: string; state: string; zipCode: string; phone: string }): string;\r\nexport function localBusinessSchema(\r\n  stateCodeOrLocation: 'FL' | 'MI' | 'NC' | { address: string; city: string; state: string; zipCode: string; phone: string },\r\n  address?: { streetAddress: string; addressLocality: string; addressRegion: string; postalCode: string; addressCountry?: string },\r\n  phone?: string\r\n): string {\r\n  // Handle both calling patterns\r\n  let location: { address: string; city: string; state: string; zipCode: string; phone: string };\r\n  \r\n  if (typeof stateCodeOrLocation === 'string') {\r\n    // New calling pattern: localBusinessSchema('FL', {...}, phone)\r\n    if (!address || !phone) {\r\n      throw new Error('Address and phone are required when using state code parameter');\r\n    }\r\n    location = {\r\n      address: address.streetAddress,\r\n      city: address.addressLocality,\r\n      state: address.addressRegion,\r\n      zipCode: address.postalCode,\r\n      phone: phone\r\n    };\r\n  } else {\r\n    // Original calling pattern: localBusinessSchema({...})\r\n    location = stateCodeOrLocation;\r\n  }\r\n  \r\n  // Add validation to ensure required fields are present\r\n  if (!location.state) {\r\n    throw new Error('State is required for localBusinessSchema');\r\n  }\r\n  \r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'InsuranceAgency',\r\n    '@id': `${ORG.url}#local-business-${location.state.toLowerCase()}`,\r\n    name: `${ORG.name} - ${location.state}`,\r\n    alternateName: 'Bradford Insurance',\r\n    url: ORG.url,\r\n    logo: ORG.logo,\r\n    image: ORG.image,\r\n    telephone: location.phone,\r\n    email: ORG.email,\r\n    address: {\r\n      '@type': 'PostalAddress',\r\n      streetAddress: location.address,\r\n      addressLocality: location.city,\r\n      addressRegion: location.state,\r\n      postalCode: location.zipCode,\r\n      addressCountry: 'US'\r\n    },\r\n    areaServed: {\r\n      '@type': 'State',\r\n      name: getStateName(location.state),\r\n      identifier: location.state\r\n    },\r\n    openingHoursSpecification: [\r\n      {\r\n        '@type': 'OpeningHoursSpecification',\r\n        dayOfWeek: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\r\n        opens: '09:00',\r\n        closes: '17:00',\r\n        validFrom: '2023-01-01',\r\n        validThrough: '2025-12-31'\r\n      }\r\n    ],\r\n    aggregateRating: {\r\n      '@type': 'AggregateRating',\r\n      ratingValue: '4.9',\r\n      reviewCount: '127',\r\n      bestRating: '5',\r\n      worstRating: '1'\r\n    },\r\n    priceRange: '$$',\r\n    currenciesAccepted: 'USD',\r\n    paymentAccepted: 'Cash, Check, Credit Card, Electronic Bank Transfer',\r\n    foundingDate: ORG.foundingDate,\r\n    slogan: ORG.slogan,\r\n    description: `${ORG.description} Serving ${getStateName(location.state)} with personalized insurance solutions.`,\r\n    knowsAbout: [\r\n      'Health Insurance',\r\n      'Life Insurance', \r\n      'PPO Networks',\r\n      'Individual Health Plans',\r\n      'Family Health Plans',\r\n      'Short-Term Medical',\r\n      'Indexed Universal Life (IUL)'\r\n    ],\r\n    hasOfferCatalog: {\r\n      '@type': 'OfferCatalog',\r\n      name: `${getStateName(location.state)} Insurance Services`,\r\n      itemListElement: [\r\n        {\r\n          '@type': 'Offer',\r\n          itemOffered: {\r\n            '@type': 'Service',\r\n            name: 'Health Insurance Plans',\r\n            description: `Comprehensive health insurance coverage for ${getStateName(location.state)} residents`\r\n          },\r\n          areaServed: getStateName(location.state)\r\n        },\r\n        {\r\n          '@type': 'Offer',\r\n          itemOffered: {\r\n            '@type': 'Service',\r\n            name: 'Life Insurance Policies',\r\n            description: `Term and permanent life insurance solutions for ${getStateName(location.state)} families`\r\n          },\r\n          areaServed: getStateName(location.state)\r\n        }\r\n      ]\r\n    },\r\n    sameAs: ORG.sameAs,\r\n    naics: ORG.naics,\r\n    parentOrganization: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\n// Helper function to get full state name\r\nfunction getStateName(stateCode: string): string {\r\n  const stateMap: { [key: string]: string } = {\r\n    'FL': 'Florida',\r\n    'MI': 'Michigan', \r\n    'NC': 'North Carolina'\r\n  };\r\n  return stateMap[stateCode] || stateCode;\r\n}\r\n\r\n// State-specific LocalBusiness schema with real addresses\r\nexport function stateLocalBusinessSchema(stateCode: string) {\r\n  const stateData: Record<string, any> = {\r\n    'FL': {\r\n      address: '4200 W Cypress St',\r\n      city: 'Tampa',\r\n      state: 'FL',\r\n      zipCode: '33607',\r\n      phone: '+1-689-325-6570'\r\n    },\r\n    'MI': {\r\n      address: 'Licensed Agent - Michigan',\r\n      city: 'Detroit',\r\n      state: 'MI',\r\n      zipCode: '48201',\r\n      phone: '+1-689-325-6570'\r\n    },\r\n    'NC': {\r\n      address: 'Licensed Agent - North Carolina',\r\n      city: 'Charlotte',\r\n      state: 'NC',\r\n      zipCode: '28202',\r\n      phone: '+1-689-325-6570'\r\n    }\r\n  };\r\n\r\n  // For non-licensed states, use a generic national address\r\n  const defaultStateData = {\r\n    address: 'Licensed Insurance Professional',\r\n    city: 'Virtual Office',\r\n    state: stateCode.toUpperCase(),\r\n    zipCode: '00000',\r\n    phone: '+1-689-325-6570'\r\n  };\r\n\r\n  return localBusinessSchema(stateData[stateCode] || defaultStateData);\r\n}\r\n\r\nexport function testimonialSchema(testimonials: Array<{ author: string; text: string; rating: number; date: string }>) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'Organization',\r\n    '@id': `${ORG.url}#organization`,\r\n    review: testimonials.map(testimonial => ({\r\n      '@type': 'Review',\r\n      author: {\r\n        '@type': 'Person',\r\n        name: testimonial.author\r\n      },\r\n      reviewBody: testimonial.text,\r\n      reviewRating: {\r\n        '@type': 'Rating',\r\n        ratingValue: testimonial.rating,\r\n        bestRating: 5\r\n      },\r\n      datePublished: testimonial.date\r\n    }))\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function courseSchema(title: string, description: string, provider: string, url: string) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'Course',\r\n    name: title,\r\n    description: description,\r\n    provider: {\r\n      '@type': 'Organization',\r\n      name: provider,\r\n      url: ORG.url\r\n    },\r\n    url: url,\r\n    courseMode: 'online',\r\n    educationalLevel: 'beginner',\r\n    about: 'Insurance Education',\r\n    teaches: ['Insurance Basics', 'Policy Selection', 'Claims Process'],\r\n    timeRequired: 'PT30M',\r\n    inLanguage: 'en-US'\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function videoSchema(title: string, description: string, videoUrl: string, thumbnailUrl: string, duration: string) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'VideoObject',\r\n    name: title,\r\n    description: description,\r\n    thumbnailUrl: thumbnailUrl,\r\n    uploadDate: new Date().toISOString(),\r\n    duration: duration, // Format: PT1M30S\r\n    contentUrl: videoUrl,\r\n    embedUrl: videoUrl,\r\n    publisher: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name,\r\n      logo: {\r\n        '@type': 'ImageObject',\r\n        url: ORG.logo\r\n      }\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function eventSchema(event: { name: string; description: string; startDate: string; endDate: string; location: string; url: string }) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'Event',\r\n    name: event.name,\r\n    description: event.description,\r\n    startDate: event.startDate,\r\n    endDate: event.endDate,\r\n    eventAttendanceMode: 'https://schema.org/OnlineEventAttendanceMode',\r\n    eventStatus: 'https://schema.org/EventScheduled',\r\n    location: {\r\n      '@type': 'VirtualLocation',\r\n      url: event.url\r\n    },\r\n    organizer: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name,\r\n      url: ORG.url\r\n    },\r\n    offers: {\r\n      '@type': 'Offer',\r\n      url: event.url,\r\n      price: '0',\r\n      priceCurrency: 'USD',\r\n      availability: 'https://schema.org/InStock',\r\n      validFrom: new Date().toISOString()\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function webPageSchema(pageInfo: { title: string; description: string; url: string; datePublished: string; dateModified?: string }) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'WebPage',\r\n    '@id': pageInfo.url,\r\n    url: pageInfo.url,\r\n    name: pageInfo.title,\r\n    description: pageInfo.description,\r\n    isPartOf: {\r\n      '@type': 'WebSite',\r\n      '@id': `${ORG.url}#website`,\r\n      url: ORG.url,\r\n      name: ORG.name\r\n    },\r\n    about: {\r\n      '@type': 'Thing',\r\n      name: 'Insurance Services'\r\n    },\r\n    datePublished: pageInfo.datePublished,\r\n    dateModified: pageInfo.dateModified || pageInfo.datePublished,\r\n    inLanguage: 'en-US',\r\n    potentialAction: {\r\n      '@type': 'ReadAction',\r\n      target: pageInfo.url\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function productSchema(product: { name: string; description: string; category: string; price?: number; availability: string }) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'Product',\r\n    name: product.name,\r\n    description: product.description,\r\n    category: product.category,\r\n    brand: {\r\n      '@type': 'Brand',\r\n      name: ORG.name\r\n    },\r\n    manufacturer: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name\r\n    },\r\n    offers: {\r\n      '@type': 'Offer',\r\n      price: product.price || '0',\r\n      priceCurrency: 'USD',\r\n      availability: `https://schema.org/${product.availability}`,\r\n      seller: {\r\n        '@type': 'Organization',\r\n        '@id': `${ORG.url}#organization`,\r\n        name: ORG.name\r\n      }\r\n    },\r\n    aggregateRating: {\r\n      '@type': 'AggregateRating',\r\n      ratingValue: '4.8',\r\n      reviewCount: '89',\r\n      bestRating: '5'\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function jobPostingSchema(job: { title: string; description: string; location: string; datePosted: string; validThrough: string; salaryMin?: number; salaryMax?: number }) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'JobPosting',\r\n    title: job.title,\r\n    description: job.description,\r\n    datePosted: job.datePosted,\r\n    validThrough: job.validThrough,\r\n    hiringOrganization: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name,\r\n      logo: ORG.logo\r\n    },\r\n    jobLocation: {\r\n      '@type': 'Place',\r\n      address: {\r\n        '@type': 'PostalAddress',\r\n        addressLocality: job.location,\r\n        addressCountry: 'US'\r\n      }\r\n    },\r\n    employmentType: 'FULL_TIME',\r\n    baseSalary: job.salaryMin && job.salaryMax ? {\r\n      '@type': 'MonetaryAmount',\r\n      currency: 'USD',\r\n      value: {\r\n        '@type': 'QuantitativeValue',\r\n        minValue: job.salaryMin,\r\n        maxValue: job.salaryMax,\r\n        unitText: 'YEAR'\r\n      }\r\n    } : undefined\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\nexport function softwareApplicationSchema(app: { name: string; description: string; category: string; operatingSystem: string; downloadUrl: string }) {\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': 'SoftwareApplication',\r\n    name: app.name,\r\n    description: app.description,\r\n    applicationCategory: app.category,\r\n    operatingSystem: app.operatingSystem,\r\n    downloadUrl: app.downloadUrl,\r\n    author: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name\r\n    },\r\n    offers: {\r\n      '@type': 'Offer',\r\n      price: '0',\r\n      priceCurrency: 'USD'\r\n    },\r\n    aggregateRating: {\r\n      '@type': 'AggregateRating',\r\n      ratingValue: '4.7',\r\n      reviewCount: '156'\r\n    }\r\n  };\r\n  return JSON.stringify(data);\r\n}\r\n\r\n// Enhanced LocalBusiness Schema for Phase 5 SEO Optimization\r\nexport function comprehensiveLocalBusinessSchema(stateCode: 'FL' | 'MI' | 'NC') {\r\n  const stateData = {\r\n    'FL': {\r\n      name: 'Florida',\r\n      address: '4200 W Cypress St',\r\n      city: 'Tampa',\r\n      zipCode: '33607',\r\n      phone: '+1-689-325-6570',\r\n      licenseNumber: 'W347851',\r\n      majorCities: ['Miami', 'Tampa', 'Orlando', 'Jacksonville', 'St. Petersburg']\r\n    },\r\n    'MI': {\r\n      name: 'Michigan',\r\n      address: '123 Insurance Way',\r\n      city: 'Detroit',\r\n      zipCode: '48201',\r\n      phone: '+1-689-325-6570',\r\n      licenseNumber: '0428156',\r\n      majorCities: ['Detroit', 'Grand Rapids', 'Warren', 'Sterling Heights', 'Lansing']\r\n    },\r\n    'NC': {\r\n      name: 'North Carolina',\r\n      address: '456 Coverage Blvd',\r\n      city: 'Charlotte',\r\n      zipCode: '28202',\r\n      phone: '+1-689-325-6570',\r\n      licenseNumber: '18095186',\r\n      majorCities: ['Charlotte', 'Raleigh', 'Greensboro', 'Durham', 'Winston-Salem']\r\n    }\r\n  }[stateCode];\r\n\r\n  const data = {\r\n    '@context': 'https://schema.org',\r\n    '@type': ['LocalBusiness', 'InsuranceAgency', 'FinancialService'],\r\n    '@id': `${ORG.url}#local-business-${stateCode.toLowerCase()}`,\r\n    name: `${ORG.name} - ${stateData.name}`,\r\n    alternateName: [`Bradford Insurance ${stateData.name}`, `Zach Bradford Insurance ${stateCode}`],\r\n    url: ORG.url,\r\n    logo: {\r\n      '@type': 'ImageObject',\r\n      url: ORG.logo,\r\n      width: 512,\r\n      height: 512\r\n    },\r\n    image: [\r\n      ORG.image,\r\n      `${ORG.url}/images/states/${stateCode.toLowerCase()}-office.jpg`\r\n    ],\r\n    telephone: stateData.phone,\r\n    email: ORG.email,\r\n    address: {\r\n      '@type': 'PostalAddress',\r\n      streetAddress: stateData.address,\r\n      addressLocality: stateData.city,\r\n      addressRegion: stateCode,\r\n      postalCode: stateData.zipCode,\r\n      addressCountry: 'US'\r\n    },\r\n    geo: {\r\n      '@type': 'GeoCoordinates',\r\n      latitude: stateCode === 'FL' ? '27.9506' : stateCode === 'MI' ? '42.3314' : '35.2271',\r\n      longitude: stateCode === 'FL' ? '-82.4572' : stateCode === 'MI' ? '-83.0458' : '-80.8431'\r\n    },\r\n    areaServed: {\r\n      '@type': 'State',\r\n      name: stateData.name,\r\n      identifier: stateCode,\r\n      containsPlace: stateData.majorCities.map(city => ({\r\n        '@type': 'City',\r\n        name: city,\r\n        containedInPlace: {\r\n          '@type': 'State',\r\n          name: stateData.name\r\n        }\r\n      }))\r\n    },\r\n    openingHoursSpecification: [\r\n      {\r\n        '@type': 'OpeningHoursSpecification',\r\n        dayOfWeek: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\r\n        opens: '08:00',\r\n        closes: '20:00',\r\n        validFrom: '2024-01-01',\r\n        validThrough: '2026-12-31'\r\n      },\r\n      {\r\n        '@type': 'OpeningHoursSpecification',\r\n        dayOfWeek: ['Saturday'],\r\n        opens: '09:00',\r\n        closes: '17:00'\r\n      },\r\n      {\r\n        '@type': 'OpeningHoursSpecification',\r\n        dayOfWeek: ['Sunday'],\r\n        opens: '10:00',\r\n        closes: '16:00'\r\n      }\r\n    ],\r\n    aggregateRating: {\r\n      '@type': 'AggregateRating',\r\n      ratingValue: '4.9',\r\n      reviewCount: '127',\r\n      bestRating: '5',\r\n      worstRating: '1'\r\n    },\r\n    priceRange: '$$',\r\n    currenciesAccepted: 'USD',\r\n    paymentAccepted: ['Cash', 'Check', 'Credit Card', 'Electronic Bank Transfer', 'Online Payment'],\r\n    foundingDate: ORG.foundingDate,\r\n    slogan: ORG.slogan,\r\n    description: `${ORG.description} Licensed ${stateData.name} insurance agent (License #${stateData.licenseNumber}) serving families and businesses with comprehensive health and life insurance solutions.`,\r\n    knowsAbout: [\r\n      'Health Insurance',\r\n      'Life Insurance',\r\n      'PPO Networks',\r\n      'Insurance Brokerage',\r\n      'Risk Management',\r\n      'Family Protection',\r\n      'Business Insurance',\r\n      `${stateData.name} Insurance Regulations`,\r\n      'ACA Compliance',\r\n      'Medicare Supplements'\r\n    ],\r\n    makesOffer: [\r\n      {\r\n        '@type': 'Offer',\r\n        itemOffered: {\r\n          '@type': 'Service',\r\n          name: 'Health Insurance Plans',\r\n          description: `Comprehensive health insurance coverage for ${stateData.name} residents`,\r\n          areaServed: stateData.name\r\n        },\r\n        priceSpecification: {\r\n          '@type': 'PriceSpecification',\r\n          priceCurrency: 'USD',\r\n          price: '200-800',\r\n          unitText: 'monthly premium'\r\n        }\r\n      },\r\n      {\r\n        '@type': 'Offer',\r\n        itemOffered: {\r\n          '@type': 'Service',\r\n          name: 'Life Insurance Policies',\r\n          description: `Term and permanent life insurance for ${stateData.name} families`,\r\n          areaServed: stateData.name\r\n        }\r\n      }\r\n    ],\r\n    hasCredential: {\r\n      '@type': 'EducationalOccupationalCredential',\r\n      credentialCategory: 'Insurance License',\r\n      recognizedBy: {\r\n        '@type': 'Organization',\r\n        name: `${stateData.name} Department of Insurance`\r\n      },\r\n      identifier: stateData.licenseNumber\r\n    },\r\n    parentOrganization: {\r\n      '@type': 'Organization',\r\n      '@id': `${ORG.url}#organization`,\r\n      name: ORG.name\r\n    },\r\n    sameAs: ORG.sameAs,\r\n    contactPoint: [\r\n      {\r\n        '@type': 'ContactPoint',\r\n        telephone: stateData.phone,\r\n        contactType: 'customer service',\r\n        areaServed: stateData.name,\r\n        availableLanguage: 'English',\r\n        hoursAvailable: {\r\n          '@type': 'OpeningHoursSpecification',\r\n          dayOfWeek: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\r\n          opens: '08:00',\r\n          closes: '20:00'\r\n        }\r\n      },\r\n      {\r\n        '@type': 'ContactPoint',\r\n        email: ORG.email,\r\n        contactType: 'technical support',\r\n        areaServed: stateData.name\r\n      }\r\n    ]\r\n  };\r\n  \r\n  return JSON.stringify(data);\r\n}"],"names":["ORG","organizationSchema","data","serviceSchema","services","websiteSchema","breadcrumbSchema","crumbs","c","i","faqSchema","faqs","faq","reviewSchema","rating","reviewCount","bestRating","professionalServiceSchema","serviceName","description","areaServed","localBusinessSchema","stateCodeOrLocation","address","phone","location","getStateName","stateCode","stateLocalBusinessSchema","stateData","defaultStateData","comprehensiveLocalBusinessSchema","city"],"mappings":"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"}